#pragma version =0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "sample_lending_record.headers.fc";
#include "sample_lending_record.stdlib.fc";
#include "sample_lending_record.storage.fc";

;;
;; Contract lending_record functions
;;

(slice, cell) $lending_record$_contract_init(slice $owner) impure inline_ref {
    var (($self'owner, $self'record)) = (null(), null());
    $self'owner = $owner;
    return ($self'owner, $self'record);
}

((slice, cell), cell) $lending_record$_fun_get_record((slice, cell) $self) impure inline_ref {
    var (($self'owner, $self'record)) = $self;
    return (($self'owner, $self'record), $self'record);
}

;;
;; Receivers of a Contract lending_record
;;

(((slice, cell)), ()) $lending_record$_internal_binary_OwnershipAssigned((slice, cell) $self, (int, slice, slice) $msg) impure inline {
    var ($self'owner, $self'record) = $self;
    var ($msg'query_id, $msg'prev_owner, $msg'forward_payload) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    if (( __tact_slice_eq_bits($self'owner, $msg'prev_owner) )) {
        slice $orginal_owner = __tact_dict_get_slice_slice($self'record, 267, $ctx'sender);
        if (null?($orginal_owner)) {
        }
        $self'record~__tact_dict_set_slice_slice(267, $ctx'sender, null());
        $global_send($SendParameters$_constructor_to_value_bounce_mode_body($ctx'sender, 0, false, (2 + 64), $Transfer$_store_cell($Transfer$_constructor_query_id_new_owner_response_destination_custom_payload_forward_amount_forward_payload(0, __tact_not_null($orginal_owner), my_address(), $global_emptyCell(), 1, $global_emptySlice()))));
    } else {
        $self'record~__tact_dict_set_slice_slice(267, $ctx'sender, $msg'prev_owner);
        $global_send($SendParameters$_constructor_to_value_bounce_mode_body($ctx'sender, 0, false, (2 + 64), $Transfer$_store_cell($Transfer$_constructor_query_id_new_owner_response_destination_custom_payload_forward_amount_forward_payload(0, $self'owner, my_address(), $global_emptyCell(), 30000000, $global_emptySlice()))));
    }
    return (($self'owner, $self'record), ());
}

(((slice, cell)), ()) $lending_record$_internal_binary_Excesses((slice, cell) $self, (int) $msg) impure inline {
    var ($self'owner, $self'record) = $self;
    var ($msg'query_id) = $msg;
    $global_send($SendParameters$_constructor_value_to_mode(0, $self'owner, (64 + 2)));
    return (($self'owner, $self'record), ());
}

(((slice, cell)), ()) $lending_record$_internal_binary_Admin_Deposit((slice, cell) $self, (slice) $msg) impure inline {
    var ($self'owner, $self'record) = $self;
    var ($msg'nft_item_address) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    throw_unless(47422, ( __tact_slice_eq_bits($self'owner, $ctx'sender) ));
    $global_send($SendParameters$_constructor_to_value_bounce_mode_body($msg'nft_item_address, 0, false, (2 + 64), $Transfer$_store_cell($Transfer$_constructor_query_id_new_owner_response_destination_custom_payload_forward_amount_forward_payload(0, $self'owner, my_address(), $global_emptyCell(), 1, $global_emptySlice()))));
    return (($self'owner, $self'record), ());
}

(((slice, cell)), ()) $lending_record$_internal_binary_Admin_Withdraw((slice, cell) $self, (slice) $msg) impure inline {
    var ($self'owner, $self'record) = $self;
    var ($msg'nft_item_address) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    throw_unless(47422, ( __tact_slice_eq_bits($self'owner, $ctx'sender) ));
    slice $orginal_owner = __tact_dict_get_slice_slice($self'record, 267, $msg'nft_item_address);
    if (null?($orginal_owner)) {
        throw_unless(31535, null?($orginal_owner));
    }
    $self'record~__tact_dict_set_slice_slice(267, $msg'nft_item_address, null());
    $global_send($SendParameters$_constructor_to_value_bounce_mode_body($msg'nft_item_address, 0, false, (2 + 64), $Transfer$_store_cell($Transfer$_constructor_query_id_new_owner_response_destination_custom_payload_forward_amount_forward_payload(0, __tact_not_null($orginal_owner), my_address(), $global_emptyCell(), 1, $global_emptySlice()))));
    return (($self'owner, $self'record), ());
}

;;
;; Get methods of a Contract lending_record
;;

_ %get_record() method_id(115713) {
    var self = $lending_record$_contract_load();
    var res = self~$lending_record$_fun_get_record();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmbLerwi3H7WNoy434xGtdAYbAqVZLevja6AEL1aYwdSHy";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract lending_record
;;

((slice, cell), int) $lending_record$_contract_router_internal((slice, cell) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive OwnershipAssigned message
    if (op == 85167505) {
        var msg = in_msg~$OwnershipAssigned$_load();
        self~$lending_record$_internal_binary_OwnershipAssigned(msg);
        return (self, true);
    }
    
    ;; Receive Excesses message
    if (op == 3576854235) {
        var msg = in_msg~$Excesses$_load();
        self~$lending_record$_internal_binary_Excesses(msg);
        return (self, true);
    }
    
    ;; Receive Admin_Deposit message
    if (op == 1564276625) {
        var msg = in_msg~$Admin_Deposit$_load();
        self~$lending_record$_internal_binary_Admin_Deposit(msg);
        return (self, true);
    }
    
    ;; Receive Admin_Withdraw message
    if (op == 3709684971) {
        var msg = in_msg~$Admin_Withdraw$_load();
        self~$lending_record$_internal_binary_Admin_Withdraw(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $lending_record$_contract_load();
    
    ;; Handle operation
    int handled = self~$lending_record$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $lending_record$_contract_store(self);
}
